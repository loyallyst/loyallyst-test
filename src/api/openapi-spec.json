{
  "openapi": "3.0.0",
  "paths": {
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginAdminDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Login",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Logout",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/signup": {
      "post": {
        "operationId": "AuthController_signup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupAdminDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Signup",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/info": {
      "get": {
        "operationId": "AuthController_info",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Admin"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get info",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/projects": {
      "get": {
        "operationId": "ProjectsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Project entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all projects",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "operationId": "ProjectsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created Project entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/{id}": {
      "get": {
        "operationId": "ProjectsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the project to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Project entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a project by id",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "operationId": "ProjectsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the project to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdateBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a project",
        "tags": [
          "Projects"
        ]
      },
      "delete": {
        "operationId": "ProjectsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the project to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/pos/locations": {
      "get": {
        "operationId": "LocationsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Location entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all locations",
        "tags": [
          "Locations"
        ]
      },
      "post": {
        "operationId": "LocationsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created Location entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Location"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a location",
        "tags": [
          "Locations"
        ]
      }
    },
    "/api/pos/locations/{id}": {
      "get": {
        "operationId": "LocationsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the location to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Location entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Location"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a location by id",
        "tags": [
          "Locations"
        ]
      },
      "post": {
        "operationId": "LocationsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the location to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a location",
        "tags": [
          "Locations"
        ]
      },
      "delete": {
        "operationId": "LocationsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the location to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a location",
        "tags": [
          "Locations"
        ]
      }
    },
    "/api/pos/locations/{id}/action": {
      "post": {
        "operationId": "LocationsController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the location to perform action on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if action succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a location",
        "tags": [
          "Locations"
        ]
      }
    },
    "/api/pos/product-categories": {
      "get": {
        "operationId": "ProductCategoriesController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of ProductCategory entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductCategory"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all product categories",
        "tags": [
          "Product Categories"
        ]
      },
      "post": {
        "operationId": "ProductCategoriesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCategoryBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created ProductCategory entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProductCategory"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a product category",
        "tags": [
          "Product Categories"
        ]
      }
    },
    "/api/pos/product-categories/{id}": {
      "get": {
        "operationId": "ProductCategoriesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product category to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested ProductCategory entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProductCategory"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a product category by id",
        "tags": [
          "Product Categories"
        ]
      },
      "post": {
        "operationId": "ProductCategoriesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product category to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCategoryBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a product category",
        "tags": [
          "Product Categories"
        ]
      },
      "delete": {
        "operationId": "ProductCategoriesController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product category to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a product category",
        "tags": [
          "Product Categories"
        ]
      }
    },
    "/api/pos/product-categories/{id}/action": {
      "post": {
        "operationId": "ProductCategoriesController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product category to perform action on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if action succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a product category",
        "tags": [
          "Product Categories"
        ]
      }
    },
    "/api/pos/product-modifications": {
      "get": {
        "operationId": "ProductModificationsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of ProductModification entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductModification"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all product modifications",
        "tags": [
          "Product Modifications"
        ]
      },
      "post": {
        "operationId": "ProductModificationsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductModificationBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created ProductModification entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProductModification"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a product modification",
        "tags": [
          "Product Modifications"
        ]
      }
    },
    "/api/pos/product-modifications/{id}": {
      "get": {
        "operationId": "ProductModificationsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product modification to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested ProductModification entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProductModification"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a product modification by id",
        "tags": [
          "Product Modifications"
        ]
      },
      "post": {
        "operationId": "ProductModificationsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product modification to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductModificationBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a product modification",
        "tags": [
          "Product Modifications"
        ]
      },
      "delete": {
        "operationId": "ProductModificationsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product modification to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a product modification",
        "tags": [
          "Product Modifications"
        ]
      }
    },
    "/api/pos/product-modifications/{id}/action": {
      "post": {
        "operationId": "ProductModificationsController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product modification to perform action on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if action succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a product modification",
        "tags": [
          "Product Modifications"
        ]
      }
    },
    "/api/pos/products": {
      "get": {
        "operationId": "ProductsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Product entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all products",
        "tags": [
          "Products"
        ]
      },
      "post": {
        "operationId": "ProductsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created Product entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a product",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/pos/products/{id}": {
      "get": {
        "operationId": "ProductsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Product entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a product by id",
        "tags": [
          "Products"
        ]
      },
      "post": {
        "operationId": "ProductsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a product",
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "operationId": "ProductsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a product",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/pos/products/{id}/action": {
      "post": {
        "operationId": "ProductsController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the product to perform action on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if action succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a product",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/pos/tables": {
      "get": {
        "operationId": "TablesController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Table entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Table"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all tables",
        "tags": [
          "Tables"
        ]
      },
      "post": {
        "operationId": "TablesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTableBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created Table entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Table"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a table",
        "tags": [
          "Tables"
        ]
      }
    },
    "/api/pos/tables/{id}": {
      "get": {
        "operationId": "TablesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the table to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Table entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Table"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a table by id",
        "tags": [
          "Tables"
        ]
      },
      "post": {
        "operationId": "TablesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the table to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTableBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a table",
        "tags": [
          "Tables"
        ]
      },
      "delete": {
        "operationId": "TablesController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the table to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a table",
        "tags": [
          "Tables"
        ]
      }
    },
    "/api/pos/tables/{id}/action": {
      "post": {
        "operationId": "TablesController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the table to perform action on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if action succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a table",
        "tags": [
          "Tables"
        ]
      }
    },
    "/api/pos/transactions": {
      "get": {
        "operationId": "TransactionsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Transaction entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Transaction"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all transactions",
        "tags": [
          "Transactions"
        ]
      },
      "post": {
        "operationId": "TransactionsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created Transaction entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Transaction"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a transaction",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/api/pos/transactions/counts": {
      "get": {
        "operationId": "TransactionsController_counts",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated transaction counts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TransactionsCountsResponseDto"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all transactions count",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/api/pos/transactions/timeseries": {
      "get": {
        "operationId": "TransactionsController_timeseries",
        "parameters": [
          {
            "name": "$filter",
            "required": false,
            "in": "query",
            "description": "OData $filter expression to restrict which records are returned.",
            "schema": {
              "example": "sensorId eq 'abc123' and value gt 10",
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "required": false,
            "in": "query",
            "description": "OData $expand expression to include related navigation properties.",
            "schema": {
              "example": "device,location",
              "type": "string"
            }
          },
          {
            "name": "$from",
            "required": true,
            "in": "query",
            "description": "Start of the time series window (ISO 8601 datetime).",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "$to",
            "required": false,
            "in": "query",
            "description": "End of the time series window (milliseconds since Unix epoch).",
            "schema": {
              "example": 1672531199000,
              "type": "number"
            }
          },
          {
            "name": "$type",
            "required": false,
            "in": "query",
            "description": "Aggregation interval or type (e.g., hourly, daily, monthly).",
            "schema": {
              "example": "daily",
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression to restrict which records are returned.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "sensorId eq 'abc123' and value gt 10",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related navigation properties.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "device,location",
              "type": "string"
            }
          },
          {
            "description": "Start of the time series window (ISO 8601 datetime).",
            "name": "$from",
            "in": "query",
            "required": true,
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "End of the time series window (milliseconds since Unix epoch).",
            "required": false,
            "name": "$to",
            "in": "query",
            "schema": {
              "example": 1672531199000,
              "type": "number"
            }
          },
          {
            "description": "Aggregation interval or type (e.g., hourly, daily, monthly).",
            "required": false,
            "name": "$type",
            "in": "query",
            "schema": {
              "example": "daily",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions time series data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TransactionsTimeseriesResponseDto"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all transactions timeseries",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/api/pos/transactions/{id}": {
      "get": {
        "operationId": "TransactionsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the transaction to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Transaction entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Transaction"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a transaction by id",
        "tags": [
          "Transactions"
        ]
      },
      "post": {
        "operationId": "TransactionsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the transaction to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a transaction",
        "tags": [
          "Transactions"
        ]
      },
      "delete": {
        "operationId": "TransactionsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the transaction to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a transaction",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/api/pos/transactions/{id}/action": {
      "post": {
        "operationId": "TransactionsController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the transaction to perform action on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if action succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a transaction",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/api/pos/transactions/{id}/liqpay": {
      "post": {
        "operationId": "TransactionsController_liqpay",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the transaction for LiqPay webhook",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiqPayBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "LiqPay webhook acknowledged",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "LiqPay webhook",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/api/integrations/poster/{projectId}": {
      "get": {
        "operationId": "PosterController_find",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get poster",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get poster",
        "tags": [
          "Poster"
        ]
      },
      "post": {
        "operationId": "PosterController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePosterDtoBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update poster",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update poster",
        "tags": [
          "Poster"
        ]
      }
    },
    "/api/integrations/poster/{projectId}/sync": {
      "post": {
        "operationId": "PosterController_sync",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncPosterDtoBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sync poster",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Sync poster",
        "tags": [
          "Poster"
        ]
      }
    },
    "/api/integrations/poster/{projectId}/webhook": {
      "post": {
        "operationId": "PosterController_webhook",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPosterDtoBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook poster",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Webhook poster",
        "tags": [
          "Poster"
        ]
      }
    },
    "/api/integrations/syrve/{projectId}": {
      "get": {
        "operationId": "SyrveController_find",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project to query locations for",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Syrve Location entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get syrve locations",
        "tags": [
          "Syrve"
        ]
      },
      "post": {
        "operationId": "SyrveController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project to update settings for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSyrveDtoBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update syrve settings",
        "tags": [
          "Syrve"
        ]
      }
    },
    "/api/integrations/syrve/{projectId}/sync": {
      "post": {
        "operationId": "SyrveController_sync",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project to synchronize",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncSyrveDtoBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if sync initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Sync syrve data",
        "tags": [
          "Syrve"
        ]
      }
    },
    "/api/integrations/syrve/{projectId}/webhook": {
      "post": {
        "operationId": "SyrveController_webhook",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project for which the webhook is invoked",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSyrveDtoBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook received acknowledgement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Webhook endpoint for syrve",
        "tags": [
          "Syrve"
        ]
      }
    },
    "/api/pos/locations-products": {
      "get": {
        "operationId": "LocationsProductsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of LocationProduct entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LocationProduct"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all locations products",
        "tags": [
          "Locations Products"
        ]
      },
      "post": {
        "operationId": "LocationsProductsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationProductBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created Product entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a location product",
        "tags": [
          "Locations Products"
        ]
      }
    },
    "/api/pos/locations-products/{id}": {
      "get": {
        "operationId": "LocationsProductsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the location-product to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested LocationProduct entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LocationProduct"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a location product by id",
        "tags": [
          "Locations Products"
        ]
      },
      "post": {
        "operationId": "LocationsProductsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the location-product to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationProductBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a location product",
        "tags": [
          "Locations Products"
        ]
      }
    },
    "/api/loyalty/clients": {
      "get": {
        "operationId": "ClientsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Client entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Client"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all clients",
        "tags": [
          "Clients"
        ]
      },
      "post": {
        "operationId": "ClientsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCreateBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created Client entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Client"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/api/loyalty/clients/{id}": {
      "get": {
        "operationId": "ClientsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the client to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Client entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Client"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a client by id",
        "tags": [
          "Clients"
        ]
      },
      "post": {
        "operationId": "ClientsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the client to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUpdateBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a client",
        "tags": [
          "Clients"
        ]
      },
      "delete": {
        "operationId": "ClientsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the client to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/api/loyalty/clients/{id}/action": {
      "post": {
        "operationId": "ClientsController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the client to perform action on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if action succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/api/loyalty/groups": {
      "get": {
        "operationId": "GroupsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of LoyaltyGroup entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LoyaltyGroup"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all groups",
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "operationId": "GroupsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltyGroupCreateBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created LoyaltyGroup entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LoyaltyGroup"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/api/loyalty/groups/{id}": {
      "get": {
        "operationId": "GroupsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the group to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested LoyaltyGroup entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LoyaltyGroup"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a group by id",
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "operationId": "GroupsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the group to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltyGroupUpdateBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if update succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a group",
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "operationId": "GroupsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the group to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/api/loyalty/groups/{id}/action": {
      "post": {
        "operationId": "GroupsController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the group to perform action on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if action succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/api/loyalty/reviews": {
      "get": {
        "operationId": "ReviewsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Review entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Review"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all reviews",
        "tags": [
          "Reviews"
        ]
      }
    },
    "/api/loyalty/reviews/{id}": {
      "get": {
        "operationId": "ReviewsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the review to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Review entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Review"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a review by id",
        "tags": [
          "Reviews"
        ]
      }
    },
    "/api/loyalty/reviews/{id}/action": {
      "post": {
        "operationId": "ReviewsController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the review to perform action on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if action succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a review",
        "tags": [
          "Reviews"
        ]
      }
    },
    "/api/apps": {
      "get": {
        "operationId": "AppsController_findAll",
        "parameters": [
          {
            "name": "$orderby",
            "required": false,
            "in": "query",
            "description": "OData $orderby for sorting, e.g. \"name desc\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "required": false,
            "in": "query",
            "description": "OData $skip to offset into the result set",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$top",
            "required": false,
            "in": "query",
            "description": "OData $top to limit the number of returned records",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$filter",
            "required": false,
            "in": "query",
            "description": "OData $filter expression, e.g. \"name eq 'Portal'\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of App entities matching the query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/App"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all apps",
        "tags": [
          "Apps"
        ]
      }
    },
    "/api/apps/{id}/action": {
      "post": {
        "operationId": "AppsController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Payload containing the parameters for the custom action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if the action was executed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on an app",
        "tags": [
          "Apps"
        ]
      }
    },
    "/api/apps/posts": {
      "get": {
        "operationId": "PostsController_findAll",
        "parameters": [
          {
            "name": "$skip",
            "required": false,
            "in": "query",
            "description": "Offset into the result set",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$top",
            "required": false,
            "in": "query",
            "description": "Limit number of results",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$filter",
            "required": false,
            "in": "query",
            "description": "OData filter expression, e.g. \"title eq 'News'\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Post entities matching the query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all posts",
        "tags": [
          "Posts"
        ]
      },
      "post": {
        "operationId": "PostsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Payload for creating a new post.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created Post entity.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a post",
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/apps/posts/{id}": {
      "get": {
        "operationId": "PostsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Post entity with the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a post by id",
        "tags": [
          "Posts"
        ]
      },
      "post": {
        "operationId": "PostsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Fields to update on the post.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if the update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update a post",
        "tags": [
          "Posts"
        ]
      },
      "delete": {
        "operationId": "PostsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if the deletion was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a post",
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/apps/posts/{id}/action": {
      "post": {
        "operationId": "PostsController_action",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Arbitrary action payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if the action was processed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Action on a post",
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/uploads": {
      "get": {
        "operationId": "UploadsController_findAll",
        "parameters": [
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Upload entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Upload"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all uploads",
        "tags": [
          "Uploads"
        ]
      },
      "post": {
        "operationId": "UploadsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Multipart form with a single file field named \"file\"",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created Upload entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Upload"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create an upload",
        "tags": [
          "Uploads"
        ]
      }
    },
    "/api/uploads/{id}": {
      "get": {
        "operationId": "UploadsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the upload to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OData $filter expression for server-side filtering.",
            "required": false,
            "name": "$filter",
            "in": "query",
            "schema": {
              "example": "name eq 'John' and age gt 30",
              "type": "string"
            }
          },
          {
            "description": "OData $top parameter to limit the number of returned records.",
            "required": false,
            "name": "$top",
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "OData $skip parameter to offset the result set by the specified number of records.",
            "required": false,
            "name": "$skip",
            "in": "query",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "OData $orderby expression for sorting results.",
            "required": false,
            "name": "$orderby",
            "in": "query",
            "schema": {
              "example": "createdAt desc",
              "type": "string"
            }
          },
          {
            "description": "OData $select expression to specify which fields to include in the response.",
            "required": false,
            "name": "$select",
            "in": "query",
            "schema": {
              "example": "id,name,age",
              "type": "string"
            }
          },
          {
            "description": "OData $expand expression to include related entities in the response.",
            "required": false,
            "name": "$expand",
            "in": "query",
            "schema": {
              "example": "orders,customer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Upload entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Upload"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get an upload by id",
        "tags": [
          "Uploads"
        ]
      },
      "delete": {
        "operationId": "UploadsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the upload to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if deletion succeeded, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete an upload",
        "tags": [
          "Uploads"
        ]
      }
    },
    "/api/ollama": {
      "get": {
        "operationId": "OllamaController_findAll",
        "parameters": [
          {
            "name": "prompt",
            "required": true,
            "in": "query",
            "description": "Natural language prompt to convert into an OData query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Generated OData query string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Human language to OData query",
        "tags": [
          "Ollama"
        ]
      }
    },
    "/api/openai/odata": {
      "get": {
        "operationId": "OpenAIController_findAll",
        "parameters": [
          {
            "name": "prompt",
            "required": true,
            "in": "query",
            "description": "Natural language prompt to convert into an OData filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object containing the generated OData filter string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OpenAIResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Generate OData filter via OpenAI",
        "tags": [
          "OpenAI"
        ]
      }
    }
  },
  "info": {
    "title": "Loyallyst Admin API",
    "description": "Comprehensive administration API for Loyallyst: manage projects, loyalty clients & groups, POS operations, integrations (Syrve, Poster), file uploads, and AI-powered query generation.",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints for admin authentication, JWT login/refresh and user validation"
    },
    {
      "name": "Projects",
      "description": "CRUD operations for managing projects within an organization"
    },
    {
      "name": "Clients",
      "description": "Manage loyalty clients: list, create, update, delete, perform actions"
    },
    {
      "name": "Groups",
      "description": "Manage loyalty groups: list, create, update, delete, perform actions"
    },
    {
      "name": "Reviews",
      "description": "Manage customer reviews: list, retrieve, perform actions"
    },
    {
      "name": "Transactions",
      "description": "POS transaction operations and analytics (counts, timeseries)"
    },
    {
      "name": "Locations",
      "description": "Manage POS locations: list, retrieve, create, update, delete, actions"
    },
    {
      "name": "Products",
      "description": "Manage POS products: list, retrieve, create, update, delete, actions"
    },
    {
      "name": "Product Categories",
      "description": "Manage product categories for POS products"
    },
    {
      "name": "Product Modifications",
      "description": "Manage product modification options for POS"
    },
    {
      "name": "Locations Products",
      "description": "Manage assignment of products to specific locations"
    },
    {
      "name": "Tables",
      "description": "Manage POS table entities: list, create, update, delete, actions"
    },
    {
      "name": "Uploads",
      "description": "File upload handling: list, retrieve, upload, delete"
    },
    {
      "name": "Poster",
      "description": "Poster printing integration endpoints"
    },
    {
      "name": "Syrve",
      "description": "Syrve POS integration endpoints"
    },
    {
      "name": "Ollama",
      "description": "Generate OData queries from natural language via Ollama AI"
    },
    {
      "name": "OpenAI",
      "description": "Generate OData filter strings from natural language via OpenAI"
    }
  ],
  "servers": [
    {
      "url": "https://admin.loyallyst.xyz",
      "description": "Production endpoint for the admin API"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "LoginAdminDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Administrator email address used for authentication.",
            "example": "admin@example.com"
          },
          "password": {
            "type": "string",
            "description": "Administrator password.",
            "example": "P@ssw0rd123",
            "minLength": 8
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "SignupAdminDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Administrator full name.",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Administrator email address.",
            "example": "admin@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password for the administrator account.",
            "example": "Str0ngP@ssword!",
            "minLength": 8
          },
          "organizationName": {
            "type": "string",
            "description": "Name of the organization to be created.",
            "example": "ACME Corp"
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "organizationName"
        ]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the organization.",
            "example": "ACME Corp"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name"
        ]
      },
      "Admin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Full name of the administrator.",
            "example": "Jane Doe"
          },
          "email": {
            "type": "string",
            "description": "Administrator email address.",
            "example": "admin@example.com"
          },
          "role": {
            "type": "string",
            "description": "Role granted to the administrator.",
            "enum": [
              "OWNER",
              "ADMIN",
              "CASHIER"
            ],
            "example": "ADMIN"
          },
          "organization": {
            "description": "Organization entity the admin is associated with.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "email",
          "role",
          "organization"
        ]
      },
      "LoyaltyGroupType": {
        "type": "string",
        "enum": [
          "BONUS",
          "DISCOUNT"
        ],
        "description": "Type of loyalty group (BONUS or DISCOUNT)."
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the project.",
            "example": "My Awesome Project"
          },
          "loyalty": {
            "description": "Loyalty settings for this project.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectLoyalty"
              }
            ]
          },
          "organization": {
            "description": "Organization under which this project is created.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "loyalty",
          "organization"
        ]
      },
      "LoyaltyGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the loyalty group.",
            "example": "Gold Tier"
          },
          "type": {
            "description": "Type of loyalty group (BONUS or DISCOUNT).",
            "example": "BONUS",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoyaltyGroupType"
              }
            ]
          },
          "value": {
            "type": "number",
            "description": "Numeric value for the group (points threshold or discount percentage).",
            "example": 100
          },
          "externalId": {
            "type": "string",
            "description": "External system identifier for this loyalty group.",
            "example": "ext-loyalty-group-123",
            "nullable": true
          },
          "project": {
            "description": "Project owning this loyalty group.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization under which this loyalty group is created.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "type",
          "value",
          "project",
          "organization"
        ]
      },
      "ProjectLoyalty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "defaultGroup": {
            "description": "Default loyalty group for the project (nullable).",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LoyaltyGroup"
              }
            ]
          },
          "project": {
            "description": "Project entity owning this loyalty configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity associated with this configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "project",
          "organization"
        ]
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable name of the project.",
            "example": "My Awesome Project"
          }
        },
        "required": [
          "name"
        ]
      },
      "ProjectUpdateBodyDtoLoyalty": {
        "type": "object",
        "properties": {
          "defaultGroupId": {
            "type": "string",
            "description": "UUID of the default loyalty group to assign for this project.",
            "example": "60d21b4967d0d8992e610c85"
          }
        }
      },
      "ProjectUpdateBodyDto": {
        "type": "object",
        "properties": {
          "loyalty": {
            "description": "Nested object containing loyalty-related update fields.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectUpdateBodyDtoLoyalty"
              }
            ]
          }
        }
      },
      "Upload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Original name of the uploaded file.",
            "example": "avatar.png"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the uploaded file.",
            "example": "image/png"
          },
          "size": {
            "type": "number",
            "description": "Size of the file in bytes.",
            "example": 102400
          },
          "url": {
            "type": "string",
            "description": "URL where the file can be accessed.",
            "example": "https://cdn.example.com/uploads/avatar.png"
          },
          "width": {
            "type": "number",
            "description": "Image width in pixels, if the file is an image.",
            "example": 800
          },
          "height": {
            "type": "number",
            "description": "Image height in pixels, if the file is an image.",
            "example": 600
          },
          "blurhash": {
            "type": "string",
            "description": "Blurhash representation for preview placeholders.",
            "example": "LKO2?U%2Tw=w]~RBVZRi};RPxuwH"
          },
          "organization": {
            "description": "Organization under which this file was uploaded.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "mimeType",
          "size",
          "url",
          "organization"
        ]
      },
      "LocationZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether delivery is enabled for this zone.",
            "example": true
          },
          "price": {
            "type": "number",
            "description": "Delivery price for this zone.",
            "example": 5.5
          },
          "name": {
            "type": "string",
            "description": "Name of the delivery zone.",
            "example": "Downtown Area"
          },
          "coordinates": {
            "description": "Coordinates defining the zone boundaries.",
            "example": [
              [
                -73.935242,
                40.73061,
                0
              ],
              [
                -73.935242,
                40.73061,
                0
              ]
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "location": {
            "description": "Reference to the Location entity for this zone.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "project": {
            "description": "Reference to the Project entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Reference to the Organization entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "enabled",
          "price",
          "name",
          "coordinates",
          "location",
          "project",
          "organization"
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the location.",
            "example": "Downtown Store"
          },
          "address": {
            "type": "string",
            "description": "Physical street address of the location.",
            "example": "123 Main Street",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City where the location is situated.",
            "example": "New York",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number for the location.",
            "example": "+1 (555) 123-4567",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate of the location.",
            "example": 40.73061,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate of the location.",
            "example": -73.935242,
            "nullable": true
          },
          "image": {
            "description": "Optional image associated with the location.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Upload"
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "External system identifier for the location.",
            "example": "location-xyz-123",
            "nullable": true
          },
          "products": {
            "description": "List of products available at this location.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationProduct"
            }
          },
          "zones": {
            "description": "List of zones available at this location.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationZone"
            }
          },
          "project": {
            "description": "Project under which this location is created.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization that owns this location.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "products",
          "zones",
          "project",
          "organization"
        ]
      },
      "ProductCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the product category.",
            "example": "Beverages"
          },
          "note": {
            "type": "string",
            "description": "Internal note for the category.",
            "example": "All kinds of drinks"
          },
          "order": {
            "type": "number",
            "description": "Sort order of the category (lower values appear first).",
            "example": 1
          },
          "mondayAvailability": {
            "type": "string",
            "description": "Availability of this category during monday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "tuesdayAvailability": {
            "type": "string",
            "description": "Availability of this category during tuesday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "wednesdayAvailability": {
            "type": "string",
            "description": "Availability of this category during wednesday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "thursdayAvailability": {
            "type": "string",
            "description": "Availability of this category during thursday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "fridayAvailability": {
            "type": "string",
            "description": "Availability of this category during friday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "saturdayAvailability": {
            "type": "string",
            "description": "Availability of this category during saturday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "sundayAvailability": {
            "type": "string",
            "description": "Availability of this category during sunday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "products": {
            "description": "List of products under this category.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "externalId": {
            "type": "string",
            "description": "External system identifier for this category.",
            "example": "ext-cat-123",
            "nullable": true
          },
          "project": {
            "description": "Project entity owning this category.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity owning this category.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "note",
          "order",
          "products",
          "project",
          "organization"
        ]
      },
      "ProductModificationOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the modification option.",
            "example": "Extra Cheese"
          },
          "externalId": {
            "type": "string",
            "description": "External system ID for this option.",
            "example": "opt-1234-xyz",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Price adjustment for this option.",
            "example": 1.5
          },
          "image": {
            "description": "Image file associated with this option.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Upload"
              }
            ]
          },
          "modification": {
            "description": "Parent product modification group entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductModification"
              }
            ]
          },
          "project": {
            "description": "Project entity owning this option.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity under which this option is created.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "price",
          "modification",
          "project",
          "organization"
        ]
      },
      "ProductModification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the modification group (e.g., Toppings, Sizes).",
            "example": "Toppings"
          },
          "externalId": {
            "type": "string",
            "description": "External system ID for the modification group.",
            "example": "ext-mod-123",
            "nullable": true
          },
          "min": {
            "type": "number",
            "description": "Minimum number of options required from this group.",
            "example": 1
          },
          "max": {
            "type": "number",
            "description": "Maximum number of options allowed from this group.",
            "example": 3
          },
          "options": {
            "description": "Array of option entities available under this modification.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductModificationOption"
            }
          },
          "project": {
            "description": "Project entity reference for scoping this modification.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity reference for this modification group.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "options",
          "project",
          "organization"
        ]
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the product.",
            "example": "Coffee Latte"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the product.",
            "example": "A rich and creamy espresso-based drink with steamed milk."
          },
          "price": {
            "type": "number",
            "description": "Base price of the product.",
            "example": 4.99
          },
          "weight": {
            "type": "number",
            "description": "Weight of the product in grams.",
            "example": 250
          },
          "order": {
            "type": "number",
            "description": "Sort order of the product (lower values appear first).",
            "example": 1
          },
          "externalId": {
            "type": "string",
            "description": "External system identifier for the product.",
            "example": "ext-prod-123"
          },
          "category": {
            "description": "Category entity reference for this product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductCategory"
              }
            ]
          },
          "modifications": {
            "description": "Array of modification entities applicable to this product.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductModification"
            }
          },
          "image": {
            "description": "Image file entity associated with this product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Upload"
              }
            ]
          },
          "project": {
            "description": "Project entity reference for scoping this product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity reference for this product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "price",
          "order",
          "category",
          "project",
          "organization"
        ]
      },
      "LocationProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the product is available at this location.",
            "example": true
          },
          "price": {
            "type": "number",
            "description": "Price of the product at this location.",
            "example": 19.99
          },
          "location": {
            "description": "Location entity reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "product": {
            "description": "Product entity reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "project": {
            "description": "Project entity reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "enabled",
          "price",
          "location",
          "product",
          "project",
          "organization"
        ]
      },
      "CreateLocationBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the location.",
            "example": "Downtown Store"
          },
          "address": {
            "type": "string",
            "description": "Physical address of the location.",
            "example": "123 Main Street"
          },
          "city": {
            "type": "string",
            "description": "City where the location is situated.",
            "example": "New York"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the location in E.164 or local format.",
            "example": "+1 (555) 123-4567"
          },
          "longitude": {
            "type": "number",
            "description": "Geographic longitude coordinate.",
            "example": -73.935242
          },
          "latitude": {
            "type": "number",
            "description": "Geographic latitude coordinate.",
            "example": 40.73061
          },
          "imageId": {
            "type": "string",
            "description": "Reference ID to an image for this location.",
            "example": "60d21b4967d0d8992e610c85"
          },
          "projectId": {
            "type": "string",
            "description": "Unique identifier of the project this location belongs to.",
            "example": "60d21b4967d0d8992e610c85"
          }
        },
        "required": [
          "name",
          "projectId"
        ]
      },
      "UpdateLocationBodyDtoZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the zone.",
            "example": "zone-123"
          },
          "name": {
            "type": "string",
            "description": "Name of the zone.",
            "example": "Downtown Area"
          },
          "coordinates": {
            "description": "Coordinates defining the zone boundaries.",
            "example": [
              [
                -73.935242,
                40.73061,
                0
              ],
              [
                -73.935242,
                40.73061,
                0
              ]
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether delivery is enabled for this zone.",
            "example": true
          },
          "price": {
            "type": "number",
            "description": "Delivery fee for this zone.",
            "example": 5.5
          }
        },
        "required": [
          "id",
          "name",
          "coordinates",
          "enabled",
          "price"
        ]
      },
      "UpdateLocationBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the location.",
            "example": "Downtown Store"
          },
          "address": {
            "type": "string",
            "description": "Updated physical address of the location.",
            "example": "456 Elm Street"
          },
          "city": {
            "type": "string",
            "description": "Updated city where the location is situated.",
            "example": "San Francisco"
          },
          "phone": {
            "type": "string",
            "description": "Updated phone number of the location.",
            "example": "+1 (555) 987-6543"
          },
          "longitude": {
            "type": "number",
            "description": "Updated geographic longitude coordinate.",
            "example": -73.935242
          },
          "latitude": {
            "type": "number",
            "description": "Updated geographic latitude coordinate.",
            "example": 40.73061
          },
          "imageId": {
            "type": "string",
            "description": "Updated reference ID to an image for this location.",
            "example": "60d21b4967d0d8992e610c85"
          },
          "zones": {
            "description": "List of zones associated with this location.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateLocationBodyDtoZone"
            }
          }
        }
      },
      "CreateProductCategoryBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product category.",
            "example": "Beverages"
          },
          "order": {
            "type": "number",
            "description": "Display order of the category (lower numbers appear first).",
            "example": 1
          },
          "note": {
            "type": "string",
            "description": "Internal note for the category.",
            "example": "All kinds of drinks"
          },
          "mondayAvailability": {
            "type": "string",
            "description": "Availability of this category during monday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "tuesdayAvailability": {
            "type": "string",
            "description": "Availability of this category during tuesday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "wednesdayAvailability": {
            "type": "string",
            "description": "Availability of this category during wednesday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "thursdayAvailability": {
            "type": "string",
            "description": "Availability of this category during thursday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "fridayAvailability": {
            "type": "string",
            "description": "Availability of this category during friday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "saturdayAvailability": {
            "type": "string",
            "description": "Availability of this category during saturday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "sundayAvailability": {
            "type": "string",
            "description": "Availability of this category during sunday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "Project identifier under which this category is created.",
            "example": "60d21b4967d0d8992e610c85"
          }
        },
        "required": [
          "name",
          "projectId"
        ]
      },
      "UpdateProductCategoryBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the product category.",
            "example": "Beverages"
          },
          "note": {
            "type": "string",
            "description": "Internal note for the category.",
            "example": "All kinds of drinks"
          },
          "mondayAvailability": {
            "type": "string",
            "description": "Availability of this category during monday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "tuesdayAvailability": {
            "type": "string",
            "description": "Availability of this category during tuesday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "wednesdayAvailability": {
            "type": "string",
            "description": "Availability of this category during wednesday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "thursdayAvailability": {
            "type": "string",
            "description": "Availability of this category during thursday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "fridayAvailability": {
            "type": "string",
            "description": "Availability of this category during friday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "saturdayAvailability": {
            "type": "string",
            "description": "Availability of this category during saturday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "sundayAvailability": {
            "type": "string",
            "description": "Availability of this category during sunday.",
            "example": "13:00-15:00",
            "nullable": true
          },
          "order": {
            "type": "number",
            "description": "Updated display order of the category (lower numbers appear first).",
            "example": 1
          }
        }
      },
      "CreateProductModificationBodyDtoModificationOption": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the modification option.",
            "example": "Extra Cheese"
          },
          "price": {
            "type": "number",
            "description": "Additional price applied when this option is selected.",
            "example": 1.5
          },
          "imageId": {
            "type": "string",
            "description": "Reference ID of an image illustrating this option.",
            "example": "60d21b4967d0d8992e610c85"
          }
        },
        "required": [
          "name",
          "price"
        ]
      },
      "CreateProductModificationBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the modification group (e.g., Toppings, Sizes).",
            "example": "Toppings"
          },
          "projectId": {
            "type": "string",
            "description": "Project identifier under which this modification is created.",
            "example": "project-123"
          },
          "min": {
            "type": "number",
            "description": "Minimum number of options the customer must choose.",
            "example": 1
          },
          "max": {
            "type": "number",
            "description": "Maximum number of options the customer can choose.",
            "example": 3
          },
          "options": {
            "description": "List of available options for this modification group.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProductModificationBodyDtoModificationOption"
            }
          }
        },
        "required": [
          "name",
          "projectId",
          "min",
          "max"
        ]
      },
      "UpdateProductModificationBodyDtoModificationOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID of an existing modification option to update.",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          },
          "name": {
            "type": "string",
            "description": "Updated name for this modification option.",
            "example": "Extra Cheese"
          },
          "price": {
            "type": "number",
            "description": "Updated additional price for this option.",
            "example": 1.5
          },
          "imageId": {
            "type": "string",
            "description": "Updated image ID illustrating this option.",
            "example": "60d21b4967d0d8992e610c85"
          }
        }
      },
      "UpdateProductModificationBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the modification group (e.g., \"Toppings\").",
            "example": "Toppings"
          },
          "min": {
            "type": "number",
            "description": "Updated minimum number of options required.",
            "example": 1
          },
          "max": {
            "type": "number",
            "description": "Updated maximum number of options allowed.",
            "example": 3
          },
          "options": {
            "description": "List of modification options to update or add.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateProductModificationBodyDtoModificationOption"
            }
          }
        }
      },
      "CreateProductBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product.",
            "example": "Coffee Latte"
          },
          "order": {
            "type": "number",
            "description": "Display order of the product (lower numbers appear first).",
            "example": 1
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the product.",
            "example": "A rich and creamy espresso-based drink with steamed milk."
          },
          "price": {
            "type": "number",
            "description": "Base price of the product.",
            "example": 4.99
          },
          "weight": {
            "type": "number",
            "description": "Weight of the product (in grams).",
            "example": 250
          },
          "categoryId": {
            "type": "string",
            "description": "UUID of the category this product belongs to.",
            "example": "123e4567-e89b-12d3-a456-426614174002"
          },
          "imageId": {
            "type": "string",
            "description": "UUID of the image representing this product.",
            "example": "123e4567-e89b-12d3-a456-426614174003"
          },
          "projectId": {
            "type": "string",
            "description": "UUID of the project under which this product is created.",
            "example": "project-abc-123"
          },
          "modificationsIds": {
            "description": "List of modification IDs applicable to this product.",
            "example": [
              "7e57d004-2b97-0e7a-b45f-5387367791cd"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "price",
          "categoryId",
          "projectId"
        ]
      },
      "UpdateProductBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the product.",
            "example": "Coffee Latte"
          },
          "order": {
            "type": "number",
            "description": "Display order of the product (lower numbers appear first).",
            "example": 1
          },
          "description": {
            "type": "string",
            "description": "Updated detailed description of the product.",
            "example": "A rich and creamy espresso-based drink with steamed milk."
          },
          "price": {
            "type": "number",
            "description": "Updated base price of the product.",
            "example": 4.99
          },
          "weight": {
            "type": "number",
            "description": "Updated weight of the product (in grams).",
            "example": 250
          },
          "categoryId": {
            "type": "string",
            "description": "UUID of the category this product belongs to.",
            "example": "123e4567-e89b-12d3-a456-426614174002"
          },
          "imageId": {
            "type": "string",
            "description": "UUID of the image representing this product.",
            "example": "123e4567-e89b-12d3-a456-426614174003"
          },
          "modificationsIds": {
            "description": "List of modification IDs applicable to this product.",
            "example": [
              "7e57d004-2b97-0e7a-b45f-5387367791cd"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name or label of the table.",
            "example": "Table 1"
          },
          "location": {
            "description": "Location entity where this table is located.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "project": {
            "description": "Project entity under which this table is created.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity that owns this table.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "location",
          "project",
          "organization"
        ]
      },
      "CreateTableBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the table.",
            "example": "Table 1"
          },
          "locationId": {
            "type": "string",
            "description": "UUID of the location this table belongs to.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "UUID of the project under which this table is created.",
            "example": "60d21b4967d0d8992e610c85"
          }
        },
        "required": [
          "name",
          "locationId",
          "projectId"
        ]
      },
      "UpdateTableBodyDto": {
        "type": "object",
        "properties": {}
      },
      "ClientLoyalty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "code": {
            "type": "string",
            "description": "Alphanumeric code assigned to the client for loyalty tracking.",
            "example": "LOYALTY-ABC123",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "description": "Current loyalty balance (points or currency units).",
            "example": 0
          },
          "group": {
            "description": "Loyalty group assigned to this client (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoyaltyGroup"
              }
            ]
          },
          "client": {
            "description": "Client entity associated with this loyalty record.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Client"
              }
            ]
          },
          "project": {
            "description": "Project under which this loyalty record applies.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization owning this loyalty record.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "balance",
          "group",
          "client",
          "project",
          "organization"
        ]
      },
      "Client": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "description": "Client’s first name.",
            "example": "Jane",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Client’s last name.",
            "example": "Doe",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City where the client resides.",
            "example": "New York",
            "nullable": true
          },
          "birthday": {
            "type": "string",
            "description": "Client’s birthday in YYYY-MM-DD format.",
            "example": "1990-07-15",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Client phone number in E.164 format.",
            "example": "+15551234567"
          },
          "loyalty": {
            "description": "Loyalty account details for the client.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientLoyalty"
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "External system identifier for the client.",
            "example": "external-9876",
            "nullable": true
          },
          "project": {
            "description": "Project to which the client belongs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization under which this client is registered.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "phone",
          "loyalty",
          "project",
          "organization"
        ]
      },
      "TransactionLoyalty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "client": {
            "description": "Client entity associated with this loyalty transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Client"
              }
            ]
          },
          "transaction": {
            "description": "Transaction entity linked to this loyalty record.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Transaction"
              }
            ]
          },
          "project": {
            "description": "Project under which this loyalty transaction is recorded.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization under which this loyalty transaction occurs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "client",
          "transaction",
          "project",
          "organization"
        ]
      },
      "TransactionDelivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Status of the delivery.",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "IN_DELIVERY",
              "DELIVERED",
              "CANCELED"
            ],
            "example": "PENDING"
          },
          "type": {
            "type": "string",
            "description": "Delivery method type.",
            "enum": [
              "DELIVERY",
              "PICKUP",
              "IN_STORE"
            ],
            "example": "DELIVERY"
          },
          "address": {
            "type": "string",
            "description": "Address for delivery.",
            "example": "123 Main St, Springfield, USA",
            "nullable": true
          },
          "time": {
            "type": "string",
            "description": "Scheduled delivery or pickup time (ISO 8601).",
            "example": "2025-07-15T14:30:00Z",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Additional comments or instructions for delivery.",
            "example": "Leave at the front door.",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "External delivery identifier from another system.",
            "example": "ORD-1234567890",
            "nullable": true
          },
          "transaction": {
            "description": "Associated transaction entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Transaction"
              }
            ]
          },
          "project": {
            "description": "Project entity reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "status",
          "type",
          "transaction",
          "project",
          "organization"
        ]
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "total": {
            "type": "number",
            "description": "Total amount for the transaction.",
            "example": 0
          },
          "products": {
            "description": "Array of products and quantities in this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionProduct"
            }
          },
          "status": {
            "type": "string",
            "description": "Current status of the transaction.",
            "enum": [
              "PENDING",
              "CLOSED",
              "CANCELED"
            ],
            "example": "PENDING"
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment processing status.",
            "enum": [
              "PENDING",
              "PAID",
              "FAILED"
            ],
            "example": "PENDING"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method chosen (cash or card).",
            "enum": [
              "CASH",
              "CARD"
            ],
            "example": "CASH"
          },
          "table": {
            "description": "Table where the transaction took place (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/Table"
              }
            ]
          },
          "location": {
            "description": "Location at which the transaction occurred (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "cashier": {
            "description": "Administrator who processed the transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Admin"
              }
            ]
          },
          "loyalty": {
            "description": "Loyalty details linked to this transaction (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionLoyalty"
              }
            ]
          },
          "delivery": {
            "description": "Delivery details for this transaction (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDelivery"
              }
            ]
          },
          "project": {
            "description": "Project to which this transaction belongs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "External ID for this transaction (nullable).",
            "example": "TXN-12345"
          },
          "organization": {
            "description": "Organization under which this transaction is created.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          },
          "closedAt": {
            "type": "string",
            "description": "Date and time when the transaction was closed.",
            "format": "date-time",
            "example": "2025-07-15T13:45:30Z"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "total",
          "products",
          "status",
          "paymentStatus",
          "paymentMethod",
          "cashier",
          "project",
          "organization"
        ]
      },
      "TransactionProductModification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "modification": {
            "description": "Product modification group applied to this transaction product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductModification"
              }
            ]
          },
          "options": {
            "description": "Array of selected product modification options.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductModificationOption"
            }
          },
          "product": {
            "description": "TransactionProduct entity that this modification entry is associated with.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionProduct"
              }
            ]
          },
          "transaction": {
            "description": "Transaction entity under which this product modification was recorded.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Transaction"
              }
            ]
          },
          "project": {
            "description": "Project entity reference for this record.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity reference for this record.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "modification",
          "options",
          "product",
          "transaction",
          "project",
          "organization"
        ]
      },
      "TransactionProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product in the transaction.",
            "example": 2
          },
          "externalId": {
            "type": "string",
            "description": "External system ID for this transaction-product record.",
            "example": "TXP-123456",
            "nullable": true
          },
          "product": {
            "description": "Reference to the product entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "modifications": {
            "description": "Array of modifications applied to this product in the transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionProductModification"
            }
          },
          "transaction": {
            "description": "Reference to the parent transaction entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Transaction"
              }
            ]
          },
          "project": {
            "description": "Project entity context for this record.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity context for this record.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "quantity",
          "product",
          "modifications",
          "transaction",
          "project",
          "organization"
        ]
      },
      "TransactionsCountsResponseDto": {
        "type": "object",
        "properties": {
          "countTotal": {
            "type": "number",
            "description": "Total number of transactions recorded.",
            "example": 0
          },
          "countActive": {
            "type": "number",
            "description": "Number of transactions currently active/open.",
            "example": 0
          },
          "countClosed": {
            "type": "number",
            "description": "Number of transactions that have been closed/completed.",
            "example": 0
          },
          "countCanceled": {
            "type": "number",
            "description": "Number of transactions that were canceled.",
            "example": 0
          },
          "totalAvg": {
            "type": "number",
            "description": "Average total amount across all transactions.",
            "example": 0
          },
          "closingTimeAvg": {
            "type": "number",
            "description": "Average duration (in milliseconds) it took to close transactions.",
            "example": 0
          }
        },
        "required": [
          "countTotal",
          "countActive",
          "countClosed",
          "countCanceled",
          "totalAvg",
          "closingTimeAvg"
        ]
      },
      "TransactionsTimeseriesResponseDtoPointDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start timestamp of the segment (ISO 8601).",
            "example": "2025-05-15T00:00:00.000Z"
          },
          "to": {
            "type": "string",
            "description": "End timestamp of the segment (ISO 8601).",
            "example": "2025-05-15T00:01:00.000Z"
          },
          "countTotal": {
            "type": "number",
            "description": "Total number of transactions recorded in this segment.",
            "example": 0
          },
          "totalAvg": {
            "type": "number",
            "description": "Average total amount of transactions in this segment.",
            "example": 0
          },
          "closingTimeAvg": {
            "type": "number",
            "description": "Average duration (in milliseconds) to close transactions in this segment.",
            "example": 0
          }
        },
        "required": [
          "from",
          "to",
          "countTotal",
          "totalAvg",
          "closingTimeAvg"
        ]
      },
      "TransactionsTimeseriesResponseDto": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "number",
            "description": "Total number of segments in the time series.",
            "example": 1382
          },
          "interval": {
            "type": "number",
            "description": "Duration of each segment (in seconds).",
            "example": 1
          },
          "from": {
            "type": "string",
            "description": "Start timestamp of the overall time window (ISO 8601).",
            "example": "2025-05-15T00:00:00.000Z"
          },
          "to": {
            "type": "string",
            "description": "End timestamp of the overall time window (ISO 8601).",
            "example": "2025-05-15T23:02:14.436Z"
          },
          "points": {
            "description": "Array of data points for each time segment.",
            "example": [
              {
                "from": "2025-05-15T00:00:00.000Z",
                "to": "2025-05-15T00:01:00.000Z",
                "countTotal": 0,
                "totalAvg": 0,
                "closingTimeAvg": 0
              },
              {
                "from": "2025-05-15T00:01:00.000Z",
                "to": "2025-05-15T00:02:00.000Z",
                "countTotal": 0,
                "totalAvg": 0,
                "closingTimeAvg": 0
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionsTimeseriesResponseDtoPointDto"
            }
          }
        },
        "required": [
          "segments",
          "interval",
          "from",
          "to",
          "points"
        ]
      },
      "TransactionStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "CLOSED",
          "CANCELED"
        ],
        "description": "Initial status of the transaction."
      },
      "TransactionPaymentMethod": {
        "type": "string",
        "enum": [
          "CASH",
          "CARD"
        ],
        "description": "Payment method for the transaction."
      },
      "CreateTransactionBodyDtoProductModification": {
        "type": "object",
        "properties": {
          "modificationId": {
            "type": "string",
            "description": "UUID of the product modification.",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          },
          "optionIds": {
            "description": "List of option UUIDs chosen for this modification.",
            "example": [
              "7e57d004-2b97-0e7a-b45f-5387367791cd"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "modificationId",
          "optionIds"
        ]
      },
      "CreateTransactionBodyDtoProduct": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Quantity of the product to purchase.",
            "example": 2
          },
          "productId": {
            "type": "string",
            "description": "UUID of the product.",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          },
          "modifications": {
            "description": "Optional list of modifications applied to this product.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTransactionBodyDtoProductModification"
            }
          }
        },
        "required": [
          "quantity",
          "productId"
        ]
      },
      "CreateTransactionBodyDtoLoyalty": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "UUID of the loyalty client associated with the transaction.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "TransactionDeliveryType": {
        "type": "string",
        "enum": [
          "DELIVERY",
          "PICKUP",
          "IN_STORE"
        ],
        "description": "Type of delivery (e.g., pickup or delivery)."
      },
      "CreateTransactionBodyDtoDelivery": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "External system order ID for tracking.",
            "example": "1234567890"
          },
          "type": {
            "description": "Type of delivery (e.g., pickup or delivery).",
            "example": "DELIVERY",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDeliveryType"
              }
            ]
          },
          "address": {
            "type": "string",
            "description": "Delivery address.",
            "example": "123 Main St, Springfield, USA"
          },
          "time": {
            "type": "string",
            "description": "Scheduled delivery time in ISO 8601 format.",
            "example": "2023-10-01T12:00:00Z"
          },
          "comment": {
            "type": "string",
            "description": "Additional delivery instructions or comments.",
            "example": "Leave at the front door"
          }
        }
      },
      "CreateTransactionBodyDto": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "UUID of the location where the transaction occurs.",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "tableId": {
            "type": "string",
            "description": "UUID of the table for this transaction.",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "projectId": {
            "type": "string",
            "description": "UUID of the project under which this transaction is recorded.",
            "example": "987f6543-ba10-4fac-9cde-123456abcdef"
          },
          "status": {
            "description": "Initial status of the transaction.",
            "example": "PENDING",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionStatus"
              }
            ]
          },
          "paymentMethod": {
            "description": "Payment method for the transaction.",
            "example": "CASH",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionPaymentMethod"
              }
            ]
          },
          "products": {
            "description": "List of products included in the transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTransactionBodyDtoProduct"
            }
          },
          "loyalty": {
            "description": "Optional loyalty information attached to the transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateTransactionBodyDtoLoyalty"
              }
            ]
          },
          "delivery": {
            "description": "Optional delivery information for the transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateTransactionBodyDtoDelivery"
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "External system transaction ID for reference.",
            "example": "TXN-1234567890"
          }
        },
        "required": [
          "projectId"
        ]
      },
      "UpdateTransactionBodyDtoProductModification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID of an existing modification entry to update.",
            "example": "c56a4180-65aa-42ec-a945-5fd21dec0538"
          },
          "modificationId": {
            "type": "string",
            "description": "UUID of the modification type to apply.",
            "example": "d94f63b0-8b17-4f4a-8d12-3f29d473a54c"
          },
          "modificationOptionIds": {
            "description": "List of option UUIDs selected for this modification.",
            "example": [
              "7e57d004-2b97-0e7a-b45f-5387367791cd"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateTransactionBodyDtoProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID of the product entry to update.",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "quantity": {
            "type": "number",
            "description": "Updated quantity of the product.",
            "example": 3
          },
          "productId": {
            "type": "string",
            "description": "UUID of a different product to replace this entry.",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          },
          "modifications": {
            "description": "List of modification entries to update for this product.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateTransactionBodyDtoProductModification"
            }
          }
        }
      },
      "UpdateTransactionBodyDtoLoyalty": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Updated loyalty client UUID associated with the transaction.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "TransactionDeliveryStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "IN_PROGRESS",
          "IN_DELIVERY",
          "DELIVERED",
          "CANCELED"
        ],
        "description": "Updated delivery status."
      },
      "UpdateTransactionBodyDtoDelivery": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Updated delivery status.",
            "example": "DELIVERED",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDeliveryStatus"
              }
            ]
          }
        }
      },
      "UpdateTransactionBodyDto": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Updated transaction status.",
            "example": "CLOSED",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionStatus"
              }
            ]
          },
          "products": {
            "description": "List of products to update within the transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateTransactionBodyDtoProduct"
            }
          },
          "loyalty": {
            "description": "Updated loyalty details for the transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateTransactionBodyDtoLoyalty"
              }
            ]
          },
          "delivery": {
            "description": "Updated delivery details for the transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateTransactionBodyDtoDelivery"
              }
            ]
          }
        }
      },
      "LiqPayBody": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "LiqPay data payload"
          },
          "signature": {
            "type": "string",
            "description": "LiqPay signature for verification"
          }
        },
        "required": [
          "data",
          "signature"
        ]
      },
      "UpdatePosterDtoBody": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "token",
          "externalId"
        ]
      },
      "SyncPosterDtoBody": {
        "type": "object",
        "properties": {
          "products": {
            "type": "boolean"
          },
          "categories": {
            "type": "boolean"
          },
          "locations": {
            "type": "boolean"
          },
          "locationProducts": {
            "type": "boolean"
          },
          "loyaltyGroups": {
            "type": "boolean"
          }
        },
        "required": [
          "products",
          "categories",
          "locations",
          "locationProducts",
          "loyaltyGroups"
        ]
      },
      "WebhookPosterDtoBody": {
        "type": "object",
        "properties": {}
      },
      "UpdateSyrveDtoBody": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "token",
          "externalId"
        ]
      },
      "SyncSyrveDtoBody": {
        "type": "object",
        "properties": {
          "products": {
            "type": "boolean"
          },
          "categories": {
            "type": "boolean"
          },
          "locations": {
            "type": "boolean"
          },
          "locationProducts": {
            "type": "boolean"
          },
          "loyaltyGroups": {
            "type": "boolean"
          }
        },
        "required": [
          "products",
          "categories",
          "locations",
          "locationProducts",
          "loyaltyGroups"
        ]
      },
      "WebhookSyrveDtoBody": {
        "type": "object",
        "properties": {}
      },
      "CreateLocationProductBodyDto": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Unique identifier of the location.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "productId": {
            "type": "string",
            "description": "Unique identifier of the product.",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "price": {
            "type": "number",
            "description": "Price of the product at this location.",
            "example": 19.99
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag indicating if the product is enabled at this location.",
            "example": true
          },
          "projectId": {
            "type": "string",
            "description": "Project identifier that this location belongs to.",
            "example": "60d21b4967d0d8992e610c85"
          }
        },
        "required": [
          "locationId",
          "productId",
          "price",
          "projectId"
        ]
      },
      "UpdateLocationProductBodyDto": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "description": "Updated price of the product at this location.",
            "example": 19.99
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag indicating whether the product is enabled at this location.",
            "example": true
          }
        }
      },
      "ClientCreateBodyDtoLoyalty": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Initial loyalty balance for the client (e.g. points or currency units).",
            "example": 0
          },
          "code": {
            "type": "string",
            "description": "Unique loyalty code assigned to the client.",
            "example": "LOYALTY-1234"
          },
          "groupId": {
            "type": "string",
            "description": "Identifier of the loyalty group the client belongs to.",
            "example": "group-abc"
          }
        }
      },
      "ClientCreateBodyDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number of the client in E.164 format.",
            "example": "+15551234567"
          },
          "externalId": {
            "type": "string",
            "description": "External system ID referencing this client.",
            "example": "external-9876"
          },
          "firstName": {
            "type": "string",
            "description": "Client’s first name.",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "description": "Client’s last name.",
            "example": "Doe"
          },
          "city": {
            "type": "string",
            "description": "City where the client resides.",
            "example": "New York"
          },
          "birthday": {
            "type": "string",
            "description": "Client’s birthday in YYYY-MM-DD format.",
            "example": "1990-07-15"
          },
          "projectId": {
            "type": "string",
            "description": "Project identifier associated with this client.",
            "example": "project-123"
          },
          "loyalty": {
            "description": "Optional loyalty settings for the client.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientCreateBodyDtoLoyalty"
              }
            ]
          }
        },
        "required": [
          "phone",
          "projectId"
        ]
      },
      "ClientUpdateBodyDtoLoyalty": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Updated loyalty balance (points or currency).",
            "example": 120
          },
          "groupId": {
            "type": "string",
            "description": "Identifier of the loyalty group to assign.",
            "example": "group-gold"
          }
        }
      },
      "ClientUpdateBodyDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Updated phone number in E.164 format.",
            "example": "+15551234567"
          },
          "firstName": {
            "type": "string",
            "description": "Client’s first name.",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "description": "Client’s last name.",
            "example": "Doe"
          },
          "birthday": {
            "type": "string",
            "description": "Client’s birthday in YYYY-MM-DD format.",
            "example": "1990-07-15"
          },
          "loyalty": {
            "description": "Optional loyalty update payload.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientUpdateBodyDtoLoyalty"
              }
            ]
          }
        }
      },
      "LoyaltyGroupCreateBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable name of the loyalty group.",
            "example": "Gold Tier"
          },
          "type": {
            "type": "string",
            "description": "Category/type of the loyalty group.",
            "enum": [
              "BONUS",
              "DISCOUNT"
            ],
            "example": "BONUS"
          },
          "value": {
            "type": "number",
            "description": "Numeric value associated with this group (e.g., points multiplier or threshold).",
            "example": 100
          },
          "projectId": {
            "type": "string",
            "description": "Identifier of the project under which this loyalty group is created.",
            "example": "60d21b4967d0d8992e610c85"
          }
        },
        "required": [
          "name",
          "type",
          "value",
          "projectId"
        ]
      },
      "LoyaltyGroupUpdateBodyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated human-readable name of the loyalty group.",
            "example": "Silver Tier"
          },
          "type": {
            "description": "Updated category/type of the loyalty group.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoyaltyGroupType"
              }
            ]
          },
          "value": {
            "type": "number",
            "description": "Updated numeric value associated with this loyalty group (e.g., threshold or multiplier).",
            "example": 150
          }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "rating": {
            "type": "number",
            "description": "Numeric rating given by the client (e.g., on a 1–5 scale).",
            "example": 4
          },
          "comment": {
            "type": "string",
            "description": "Optional textual comment from the client.",
            "example": "Great service and friendly staff!"
          },
          "location": {
            "description": "Location entity being reviewed (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "client": {
            "description": "Client entity who wrote the review (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/Client"
              }
            ]
          },
          "project": {
            "description": "Project entity context for this review.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity under which this review is created.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "rating",
          "location",
          "client",
          "project",
          "organization"
        ]
      },
      "App": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the application.",
            "example": "Customer Portal"
          },
          "domain": {
            "type": "string",
            "description": "Optional custom domain (e.g., subdomain) for the app.",
            "example": "portal.mycompany.com"
          },
          "colorPrimary": {
            "type": "string",
            "description": "Hex code of the primary brand color.",
            "example": "#1A73E8"
          },
          "logo": {
            "description": "Logo image file entity (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/Upload"
              }
            ]
          },
          "icon": {
            "description": "Icon image file entity (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/Upload"
              }
            ]
          },
          "background": {
            "description": "Background image file entity (nullable).",
            "allOf": [
              {
                "$ref": "#/components/schemas/Upload"
              }
            ]
          },
          "project": {
            "description": "Associated project entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity owning the application.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "name",
          "project",
          "organization"
        ]
      },
      "Object": {
        "type": "object",
        "properties": {}
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Title of the post.",
            "example": "Introducing Our New Feature"
          },
          "text": {
            "type": "string",
            "description": "Main text content of the post.",
            "example": "We are excited to announce the release of..."
          },
          "image": {
            "description": "Image file entity related to the post.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Upload"
              }
            ]
          },
          "project": {
            "description": "Project entity owning this post.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "organization": {
            "description": "Organization entity under which this post is created.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "title",
          "text",
          "project",
          "organization"
        ]
      },
      "CreatePostBodyDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the post.",
            "example": "Introducing Our New Feature"
          },
          "text": {
            "type": "string",
            "description": "Content body of the post.",
            "example": "We are excited to announce the release of..."
          },
          "imageId": {
            "type": "string",
            "description": "Identifier of an image associated with this post.",
            "example": "60d21b4967d0d8992e610c85"
          },
          "projectId": {
            "type": "string",
            "description": "Project identifier under which this post is created.",
            "example": "project-123"
          }
        },
        "required": [
          "title",
          "projectId"
        ]
      },
      "UpdatePostBodyDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "New title for the post.",
            "example": "Updated Feature Announcement"
          },
          "text": {
            "type": "string",
            "description": "Updated content/body text of the post.",
            "example": "We have refined our feature to include …"
          },
          "imageId": {
            "type": "string",
            "description": "UUID of a new image to associate with the post.",
            "example": "60d21b4967d0d8992e610c85"
          }
        }
      },
      "UploadCreateDto": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "Binary file to upload.",
            "format": "binary"
          }
        },
        "required": [
          "file"
        ]
      },
      "OpenAIResponse": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "Generated OData filter string"
          }
        },
        "required": [
          "filter"
        ]
      }
    }
  }
}